// Code generated by go-swagger; DO NOT EDIT.

package ipfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jirwin/ipfs-archive/models"
)

// ArchiveURLReader is a Reader for the ArchiveURL structure.
type ArchiveURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewArchiveURLCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewArchiveURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewArchiveURLCreated creates a ArchiveURLCreated with default headers values
func NewArchiveURLCreated() *ArchiveURLCreated {
	return &ArchiveURLCreated{}
}

/*ArchiveURLCreated handles this case with default header values.

Archive Response
*/
type ArchiveURLCreated struct {
	Payload *models.ArchiveResponse
}

func (o *ArchiveURLCreated) Error() string {
	return fmt.Sprintf("[POST /archive][%d] archiveUrlCreated  %+v", 201, o.Payload)
}

func (o *ArchiveURLCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ArchiveResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveURLInternalServerError creates a ArchiveURLInternalServerError with default headers values
func NewArchiveURLInternalServerError() *ArchiveURLInternalServerError {
	return &ArchiveURLInternalServerError{}
}

/*ArchiveURLInternalServerError handles this case with default header values.

Archive Error
*/
type ArchiveURLInternalServerError struct {
	Payload *models.Error
}

func (o *ArchiveURLInternalServerError) Error() string {
	return fmt.Sprintf("[POST /archive][%d] archiveUrlInternalServerError  %+v", 500, o.Payload)
}

func (o *ArchiveURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
