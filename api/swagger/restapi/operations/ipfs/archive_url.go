// Code generated by go-swagger; DO NOT EDIT.

package ipfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ArchiveURLHandlerFunc turns a function with the right signature into a archive Url handler
type ArchiveURLHandlerFunc func(ArchiveURLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ArchiveURLHandlerFunc) Handle(params ArchiveURLParams) middleware.Responder {
	return fn(params)
}

// ArchiveURLHandler interface for that can handle valid archive Url params
type ArchiveURLHandler interface {
	Handle(ArchiveURLParams) middleware.Responder
}

// NewArchiveURL creates a new http.Handler for the archive Url operation
func NewArchiveURL(ctx *middleware.Context, handler ArchiveURLHandler) *ArchiveURL {
	return &ArchiveURL{Context: ctx, Handler: handler}
}

/*ArchiveURL swagger:route POST /archive ipfs archiveUrl

Archive a URL

*/
type ArchiveURL struct {
	Context *middleware.Context
	Handler ArchiveURLHandler
}

func (o *ArchiveURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewArchiveURLParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
